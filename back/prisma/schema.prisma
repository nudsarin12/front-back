// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @db.VarChar(30) @unique
  password    String        @db.VarChar(72)
  email       String?
  todos       Todo[]        

  @@map("users")
}

model Todo {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(150)
  status      Status        @default(PENDING)
  dueDate     DateTime      @db.Date @map("due_date")
  userId      Int           @map("user_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt   DateTime      @updatedAt @db.Timestamp(0) @map("updated_at")

  @@map("todos")
}

model Customer {
  CustomerID  Int       @id @default(autoincrement())
  FirstName   String
  LastName    String
  Email       String
  Password    String
  Address     String    

  addresses   Address[]
  orders      Order[]
}

model Product {
  ProductID       Int       @id @default(autoincrement())
  Name            String
  Brand           String
  Category        String
  Price           Float
  StockQuantity   Int

  orderitems      Orderitem[]
}

model Orderitem {
  Orderitemid     Int       @id @default(autoincrement())
  Orderid         Int
  ProductID       Int
  Quantity        Int
  OrderDate       DateTime

  order           Order     @relation(fields: [Orderid], references: [OrderID])
  product         Product   @relation(fields: [ProductID], references: [ProductID])
}

model Order {
  OrderID         Int       @id @default(autoincrement())
  CustomerID      Int
  ProductID       Int
  TotalAmount     Float
  paymentMethod   String
  OrderDate       DateTime

  customer        Customer  @relation(fields: [CustomerID], references: [CustomerID])
  orderitems      Orderitem[]
  payment         Payment[]
}

model Address {
  address_id      Int       @id @default(autoincrement())
  customer_id     Int
  street          String
  city            String
  state           String
  zip_code        String
  customer        Customer  @relation(fields: [customer_id], references: [CustomerID])
}

model Payment {
  PaymentID       Int       @id @default(autoincrement())
  OrderID         Int
  PaymentDate     DateTime
  PaymentAmount   Float
  PaymentMethod   String
  order           Order     @relation(fields: [OrderID], references: [OrderID])
}

enum Status {
  PENDING
  DOING
  DONE
}
